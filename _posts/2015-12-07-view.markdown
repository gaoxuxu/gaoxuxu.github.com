---
author: gavin
comments: true
date: 2015-12-07 17:21:09
layout: post
title: View
categories:
- Java
- Android
---
##一般操作

* 设置属性：可以在xml中配置，或者在代码中设置。
* 设置焦点：framework会根据用户输入来焦点的移动，使用`requestFocus`方法强制将焦点移到特定的View。
* 设置监听者：比如焦点变化监听、点击事件监听等。
* 设置可见性：使用`setVisibility`方法来显示或者隐藏某个`View`。

##自定义View

实现一个自定义View，一般只需要重载几个特殊的方法即可：

* 创建：
	* 构造器：使用代码或者布局文件，后者可以解析并应用定义在布局文件中的属性。
	* `onFinishInflate()`：`View`和它的所有子视图都填充完后调用。
* 布局：
	* `onMeasure(int, int)`：确定该视图和它所有子视图需要的尺寸。
	* `onLayout(boolean, int, int, int, int)`：当该视图需要给它所有的子视图分配尺寸和位置时调用。
	* `onSizeChanged(int, int, int, int)`：当该视图的尺寸变化时调用。
* 绘制：
	* `onDraw(android.graphics.Canvas)`：当该视图需要渲染它的内容时调用。
* 事件处理：
	* `onKeyDown(int, KeyEvent)`：设备按键按下事件。
	* `onKeyUp(int, KeyEvent)`：设备按键抬起事件。
	* `onTrackballEvent(MotionEvent)`：轨迹球事件。
	* `onTouchEvent(MotionEvent)`：屏幕触摸事件。
* 焦点：
	* `onFocusChanged(boolean, int, android.graphics.Rect)`：当该view捕获或者失去焦点时调用。
	* `onWindowFocusChanged(boolean)`：当该窗口包含一个捕获或者失去焦点的视图时调用。
* Attaching：
	* `onAttachedToWindow()`：当该视图固定到一个窗口上时调用。
	* `onDetachedFromWindow`：当该视图从它的窗口上脱离时调用。
	* `onWindowVisibilityChanged(int)`：当包含给视图的窗口可见性变化时调用。

##位置

`View`的几何形状是矩形。一个`View`的位置使用两组值表示：一组是左上顶点的坐标，一组是两个尺寸，及宽和高。位置的最小单位是像素。

使用`getLeft()`和`getTop()`方法可以获得当前view在它直接上级中的位置，比如如果`getLeft()`方法返回20，则意味着该view距离它直接上级的左边缘距离为20。`getRight()`和`getBottom()`方法可以获得该view右下顶点的位置，使用`getRight()`方法等同于`getLeft() + getWidth()`。

##尺寸、外边距、内边距

view的尺寸即宽和高，一个view实际上有两组宽和高的值：

* measured width和measured height：这组尺寸定义了一个view想要在它的父view中占据多大的位置。使用`getMeasuredWidth()`和`getMeasuredHeight()`方法获得这一组参数。
* 第二组就是简单的宽和高，或者说所谓的drawing width和drawing height。这组值是该view在绘制时和布局后实际在屏幕上的尺寸。这组值和测量的值不一定相同。使用`getWidth()`和`getHeight()`方法来获取这组参数。

padding（内边距）就是视图内容的偏移距离，可以明确指定左、上、右、下的偏移值，比如左padding设置为2的话，内容就会偏移左边缘2像素。可以使用`setPadding(int, int, int, int)`和`setPaddingRelative(int, int, int, int)`方法来设置，以及使用`getPaddingLeft()`、`getPaddingTop()`、`getPaddingRight()`、`getPaddingBottom()`、`getPaddingStart()`和`getPaddingEnd()`方法来查询。

margin（外边距）就是当前视图在上层布局（`ViewGroup`）中的偏移（页边），使用`android.view.ViewGroup.MarginLayoutParams`来设置。

##布局（Layout）

布局分为两个步骤：测量和布局。测量过程是通过在view tree上从上到下递归调用`measure(int, int)`方法来实现的，递归中`view`将尺寸规格推到树中的下级节点。测量过程结束后，每个`view`都将它的尺寸存储起来。布局过程也是从上到下执行的，不过是通过递归调用`layout(int, int, int, int)`方法来实现。在这个过程中每个`ViewParent`都负责通过在测量过程计算得到的尺寸来确定它所有子视图的位置。

当一个`view`的`measure()`方法返回时，它以及它所有的后代视图的`getMeasuredWidth()`和`getMeasuredHeight()`方法的返回值都被设置。一个`view`的`measured width`和`measured height`必须考虑到它父视图对它强加的限制，这样可以保证在测量过程结束后，所有的父视图可以接受它们所有的子视图的尺寸。一个父视图可能会不止一次调用它子视图的`measure()`方法，例如，父视图以未指定尺寸测量每个子视图来确定它想要多大的空间，然后，如果所有的子视图加起来尺寸太大或太小的话，再以确定的值来测量每个子视图。

测量过程使用两个类来传递尺寸，视图通过`MeasureSpec`类来告诉它们的父视图它们想要哪种方式来测量和确定位置。`LayoutParams`类（基类）定义了视图想要多大的宽和高，每种尺寸都可以设置为：

* 一个确定的值。
* `MATCH_PARENT`，意思是该视图想要和它的父视图一样大（减去padding）。
* `WRAP_CONTENT`，意思是该视图仅仅想要足以包裹其内容的大小（加上padding）。

`ViewGroup`的子类都有自己的继承自`LayoutParams`类的子类。例如，`AbsoluteLayout`就有它自己的`LayoutParams`子类，可以添加x和y坐标的值。

`MeasureSpecs`类被用来将需求从视图树上从上而下推进，`MeasureSpec`you三种模式：

* `UNSPECIFIED`：父视图用来确定子视图期望的尺寸。例如，一个`LinearLayout`调用它子视图的`measure()`方法时，高设置为`UNSPECIFIED`以及宽设置为`EXACTLY`240，这时它就要确定要给一个宽为240像素的子视图分配多少的高。
* `EXACTLY`：父视图用来强制给子视图一个确定的尺寸，子视图必须使用该尺寸，并且保证它的后代视图都在这个尺寸填充的范围内。
* `AT_MOST`：父视图用来强制给子视图一个最大的尺寸，子视图必须保证它以及它所有的后代视图都在这个尺寸填充的范围内。

直接布局的话，调用`requestLayout()`方法即可。这个方法通常是由view自己调用的，调用时它相信它已经不再适合它当前的边界了。

##绘制（Drawing）

