---
author: gavin
comments: true
date: 2013-04-17 16:51:51
layout: post
slug: go%e8%af%ad%e8%a8%80%e4%b9%8b%e6%97%85-%e6%96%b9%e6%b3%95%e4%b8%8e%e6%8e%a5%e5%8f%a3
title: Go语言之旅——方法与接口
wordpress_id: 134
categories:
- Go
tags:
- Go
- http
- image
- Interface
- Method
---

## 
	一、方法：






	Go中没有类。但是，可以在结构体类型上定义方法。方法接收者出现在func关键字与方法名之间的参数中。 






	  





    
        package main
    
        import (
            "fmt"
            "math"
        )
    
        type Vertex struct {
            X, Y float64
        }
    
        func (v *Vertex) Abs() float64 {
            return math.Sqrt(v.X*v.X + v.Y*v.Y)
        }
    
        func main() {
            v := &Vertex{3, 4}
            fmt.Println(v.Abs())
        }





	  







	可以对包中的任意类型定义方法，而不只是结构体。但是，不能对来自于其它包的类型和基本类型定义方法。






	  





    
        package main
    
        import (
            "fmt"
            "math"
        )
    
        type MyFloat float64
    
        func (f MyFloat) Abs() float64 {
            if f < 0 {
                return float64(-f)
            }
            return float64(f)
        }
    
        func main() {
            f := MyFloat(-math.Sqrt2)
            fmt.Println(f.Abs())
        }





	  







	方法可以与命名类型或命名类型的指针相关联。只看两个Abs方法，下面例子中方法的接收者为*Vertex指针类型，而上面例子中为MyFloat值类型）。






	使用指针接收者有两个原因：首先，避免在每一次方法调用上复制值（当值类型是非常大的结构体时更有效率）；其次，方法可以修改接收者指向的值。 






	尝试改变下例中Abs和Scale方法的声明，使用Vertex代替*Vertex为接收者。你将看到：当v为Vertex时，Scale方法没有任何效果，当v是一个值（非指针）类型时，这个方法复制了一个Vertex类型的值，所以它无法修改原始值；Abs方法可以正常工作，它仅仅是读取了v的值，无论是通过复制的值还是原始值（通过指针）都没有关系。 




    
        package main
    
        import (
            "fmt"
            "math"
        )
    
        type Vertex struct {
            X, Y float64
        }
    
        func (v *Vertex) Scale(f float64) {
            v.X = v.X * f
            v.Y = v.Y * f
        }
    
        func (v *Vertex) Abs() float64 {
            return math.Sqrt(v.X*v.X + v.Y*v.Y)
        }
    
        func main() {
            v := &Vertex{3, 4}
            v.Scale(5)
            fmt.Println(v, v.Abs())
        }




## 
	二、接口：






	接口类型用来描述一组方法的集合。接口类型的值可以存放任意实现这些方法的值。







    
        package main
    
        import (
            "fmt"
            "math"
        )
    
        type Abser interface {
            Abs() float64
        }
    
        func main() {
            var a Abser
            f := MyFloat(-math.Sqrt2)
            v := Vertex{3, 4}
    
            a =f // a MyFloat implements Abser
            a = &v // a *Vertex implements Abser
            //a = v // a Vertex, does NOT implements Abser
    
            fmt.Println(a.Abs())
        }
    
        type MyFloat float64
    
        func (f MyFloat) Abs() float64 {
            if f < 0 {
                return float64(-f)
            }
            return float64(f)
        }
    
        type Vertex struct {
            X, Y float64
        }
    
        func (v *Vertex) Abs() float64 {
            return math.Sqrt(v.X*v.X + v.Y*v.Y)
        }








	类型通过实现方法来实现一个接口，因此也就没有显式声明的必要。






	隐式接口分离了实现的包与定义接口的包：即二者互不依赖。它还鼓励明确的接口定义，因此不必通过一个新的接口名查找所有实现和标签。






	下例中，由于包io下已经定义了Reader和Writer接口，所以这里你不必如此：







    
        package main
    
        import (
            "fmt"
            "os"
        )
    
        type Reader interface {
            Read(b []byte) (n int, err error)
        }
    
        type Writer interface {
            Write(b []byte) (n int, err error)
        }
    
        type ReadWriter interface {
            Reader
            Writer
        }
    
        func main() {
            var w Writer
    
            // os.Stdout implements Writer
            w = os.Stdout
    
            fmt.Fprintf(w, "hello, writer\n")
        }







## 
	三、错误：






	错误可以是任意能用一个错误字符串描述自身的东西。思路是通过捕获内建的预定义error接口类型，这个接口只有一个返回一个字符串的方法：Error。




    
        type error interface {
            Error() string
        }


当用fmt包的各种打印方法打印error时，会自动调用这个方法：  


    
        package main
    
        import (
            "fmt"
            "time"
        )
    
        type MyError struct {
            When time.Time
            What string
        }
    
        func (e *MyError) Error() string {
            return fmt.Sprintf("at %v, %s", e.When, e.What)
        }
    
        func run() error {
            return &MyError {
                time.Now(),
                "it didn't work",
            }
        }
    
        func main() {
            if err := run(); err != nil {
                fmt.Println(err)
            }
        }




## 
	四、Web server：






	http包可以使用任意实现了http.Handler接口的值来处理HTTP请求。




    
        package http
    
        type Handler interface {
            ServeHTTP(w ResponseWriter, r *Request)
        }


在下面的例子中，Hello类型实现了http.Handler接口。访问http://localhost:4000会看到程序给出的问候。  


    
        package main
    
        import (
            "fmt"
            "net/http"
        )
    
        type Hello struct {}
    
        func (h Hello) ServeHTTP(
            w http.ResponseWriter,
            r *http.Request) {
                fmt.Fprint(w, "Hello!")
        }
    
        func main() {
            var h Hello
            http.ListenAndServe("localhost:4000", h)
        }


处理你web服务器上指定的路径。  


    
        package main
    
        import (
            "net/http"
            "fmt"
        )
    
        type String string
        type Struct struct {
            Greeting string
            Punct string
            Who string
        }
    
        func (s String) ServeHTTP(
            w http.ResponseWriter,
            r *http.Request) {
                fmt.Fprint(w, s)
        }
    
        func (s *Struct) ServeHTTP(
            w http.ResponseWriter,
            r *http.Request) {
                fmt.Fprint(w, s)
        }
    
        func main() {
            // your http.Handle calls here
            http.Handle("/string", String("I'm a frayed knot."))
            http.Handle("/struct", &Struct{"Hello", ":", "Gophers!"})
            http.ListenAndServe("localhost:4000", nil)
        }




## 
	五、图像：



image包中定义了Image接口：  


    
        package image
    
        type Image interface {
            ColorModel() color.Model
            Bounds() Rectangle
            At(x, y int) color.Color
        }


其中color.Color和color.Model都是接口，但是这里将不使用它们，而是用内建的实现color.RGBA和color.RGBAModel。  


    
        package main
    
        import (
            "fmt"
            "image"
        )
    
        func main() {
            m := image.NewRGBA(image.Rect(0, 0, 100, 100))
            fmt.Println(m.Bounds())
            fmt.Println(m.At(0, 0).RGBA())
        }
