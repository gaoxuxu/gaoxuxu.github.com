---
author: gavin
comments: true
date: 2013-07-25 16:07:26
layout: post
slug: '%e5%88%9d%e5%85%a5c'
title: 初入C++
wordpress_id: 221
categories:
- C++
---

## 设计原则
Bjarne Stroustrup在《C++语言的设计和演化》一书中描述了他在设计C++时，所使用的一些原则。以下总结的一些设计原则出自《C++语言的设计和演化》：

  * C++设计成直接的和广泛的支持多种程序设计风格（过程化程序设计、数据抽象化、面向对象程序设计、泛型程序设计）。
  * C++设计成给程序设计者多种选择，即使可能导致程序设计者错误。
  * C++设计成尽可能与C兼容，借此提供一个从C到C++的平滑过渡。
  * C++避免平台限定或没有普遍用途的特性。
  * C++不使用会带来额外开销的特性。
  * C++设计成无需复杂的程序设计环境。

## 编程传统
C++融合了**三种不同的编程传统**：

  * **面向过程编程（Procedure Oriented programming）**：强调数据被处理的过程，以功能为中心组织代码，基本的组织方式为函数，功能由一组相关的过程和函数序列组成。
  * **面向对象编程（Object Oriented programming）**：这种编程思想将现实世界抽象成一个个对象，因此其组织方式也更贴近现实。具体应用时，将对象的属性和行为与外部环境区分开来，因此具有更好的封装型和安全性。
  * **通用编程（General-purpose programming）**：编写的代码不为特定领域服务，即可以用于各种领域。

## 语言特性

### 操作符

  * 算术操作符：可重载
  * 比较运算符：可重载
  * 移位运算符：可重载
  * 其它运算符：除成员操作符（.）、间接成员操作符（.*）、三元条件、作用域解析（::）、sizeof和typeid操作符外，都可以重载。具体信息在以后补齐。

### 预处理器

C++主要有三个编译阶段（最后两个阶段一般视为真正的“编译”）：

  * 预处理：将**预处理指令**替换为源代码，然后送到下一个编译阶段。
  * 转译成目标代码：
  * 链接

### 模板（Template）

指C++编程语言中的函数模板（function template）和类型模板（class template）。观念来自于Simula的泛型程序设计。采用typename和class两个关键字，来标识模板类型的类型参数。

### 类型与对象

**对象**是数据和处理数据的指令的联合。对象有三种特质：状态（State）、行为（Behavior）、同一性身份（Identity），使用信息来引发彼此间的交互。  

**类型**是对象的蓝图，定义了对象的抽象特质，包括对象的属性特质和对象的行为特质，属性的值即为对象的状态。  

**面向对象三大特性：**

  * **封装**：将数据和处理数据的过程组合起来，仅对外公开接口，以达到隐藏信息的作用。封装能够减少耦合（Coupling）。C++中的类型对其成员分为三种封装状态：**公有**（public）、**保护**（protected）和**私有**（private）。
  * **继承**：指子类继承超类，会自动获得超类除私有特质外的全部特质，同一类型的所有实例都会自动有该类型的全部特质，以达到代码复用的目的。C++只支持类型构成式继承，即虽然同一类型的所有实例都有该类型的全部特质，但是实例能够共享的只限于行为，而不能共享状态，除非特质为参考类型的属性，或使用指针来间接共享。C++支持的继承关系为： 
    * 公有继承（public inheritance）：子类与超类为“is-a”关系，代表了在完全使用公有继承的对象类型之间的层次结构体系。
    * 保护继承（protected inheritance）：基类的公有和保护内容可以被派生类以及由此派生的其它类使用，但是基类对外界是不可见的。派生类的用户不能访问基类的内容、不能把派生类型转换为基类的指针或引用。
    * 私有继承（private inheritance）：基类的公有和保护内容仅可以被派生类访问，含义是“implemented-in-term-of”。但基类对派生类的子类和外部环境都是不可见的，不能把派生类转换为基类的指针或引用。
  * **多态**：面向对象的精神在于多态（Polymorphism）。一般所谓多态，是指动态多态，即使用继承和动态绑定实现。使用多态可创建继承体系。类型与继承只是达成多态中的一种手段，所以称作面向对象而不是类型导向。  

多态又分为静态多态和动态多态。C++支持的动态多态必须结合继承和动态绑定实现。静态多态是指编译时决定的多态，包括重载和以模板实现多态的方法即参数化类型（Parameterized Type），使用宏的“代码膨胀法”达到多态效果。  

类型转换也是一种区域多态的概念，C++提供dynamic_cast、static_cast等运算对象来实现强制类型转换。运算对象重载和函数重载也算是多态的概念。

## 与C语言的区别

### 新增特性

和C语言相比，C++引入了很多特性，具体包括：陈述性声明、类似函数的强制转型、new/delete操作符、bool类型、参考类型、默认参数、函数重载、命名空间、类型（包括继承、成员函数、虚函数、抽象类型和构造函数）、操作符重载、模板、域解析操作符（::）、异常处理和运行时识别。

### 与C不同之处

最常见的区别之一，就是C允许从void*到其它指针类型的隐式转换，但C++不允许。另一个比较常见的问题是，C++中的一些关键字，比如new和class，在C中是可以用作标识符的。C99中新纳入的几个特性，如可变长度数组、原生复数类型和复合逐字常数也与C++冲突。  

若要混用C和C++的代码，则所有在C++中调用的C代码，必须放在extern "C" { /* statement */ }之内。

## Hello World
   
    <code>#include <iostream>
    
    int main(){
        std::cout << "Hello, World" << std::endl;
        return 0;
    }
    </code>
